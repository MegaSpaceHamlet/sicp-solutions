#lang sicp
(#%require "../../functions.rkt")
(define (pos? n)
  (>= n 0))
(define (neg? n)
  (negative? n))
(define (make-interval x y)
  (cons x y))

(define (lower-bound i)
  (min (car i) (cdr i)))

(define (upper-bound i)
  (max (car i) (cdr i)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
  (cond ((and (pos? xl) (pos? xu) (pos? yl) (pos? yu))
         (make-interval (* xl yl)
                        (* xu yu)))
        ((and (neg? xl) (neg? xu) (neg? yl) (neg? yu))
         (make-interval (* xu yu)
                        (* xl yl)))
        ((and (neg? xl) (pos? xu) (neg? yl) (pos? yu))
         (let ((min1 (* xl yu))
               (min2 (* xu yl))
               (max1 (* xl yl))
               (max2 (* xu yu)))
           (make-interval (min min1 min2)
                          (max max1 max2))))
        ((and (neg? xl) (neg? xu) (pos? yl) (pos? yu))
         (make-interval (* xl yu)
                        (* xu yl)))
        ((and (pos? xl) (pos? xu) (neg? yl) (neg? yu))
         (make-interval (* xu yl)
                        (* xl yu)))
        ((and (neg? xl) (pos? xu) (pos? yl) (pos? yu))
         (make-interval (* xl yu)
                        (* xu yu)))
        ((and (pos? xl) (pos? xu) (neg? yl) (pos? yu))
         (make-interval (* xu yl)
                        (* xu yu)))
        ((and (neg? xl) (pos? xu) (neg? yl) (neg? yu))
         (make-interval (* xu yl)
                        (* xl yl)))
        ((and (neg? xl) (neg? xu) (neg? yl) (pos? yu))
         (make-interval (* xl yu)
                        (* xl yl)))
        )))

(define (div-interval x y)
  (if (<= (* (lower-bound y) (upper-bound y)) 0)
      (error "Division error (interval spans 0)" y))
  (mul-interval
   x
   (make-interval (/ 1.0 (upper-bound y))
                  (/ 1.0 (lower-bound y)))))

(define (make-center-percent c p)
  (let ((w (* c (/ p 100))))
    (make-interval (- c w) (+ c w))))
(define (percent i)
  (let ((c (center i)))
    (let ((diff (- (upper-bound i) c)))
    (* (/ diff c) 100))))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (print-center-percent string i)
  (display string)
  (display (to-fixed (center i) 2))
  (display " Â± %")
  (display (to-fixed (percent i) 2))
  (newline))

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval
     one (add-interval (div-interval one r1)
                       (div-interval one r2)))))

(define a (make-center-percent 3.5 15))
(define b (make-center-percent 1.8 3))
(define c (make-center-percent 3 2))
(define d (make-center-percent 5 14))

(print-center-percent "a/a par1 -> " (par1 a a))
(print-center-percent "a/a par2 -> " (par2 a a))
(print-center-percent "a/b par1 -> " (par1 a b))
(print-center-percent "a/b par2 -> " (par2 a b))

